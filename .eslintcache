[{"C:\\Users\\DELL\\Desktop\\react\\01_react\\src\\index.js":"1","C:\\Users\\DELL\\Desktop\\react\\01_react\\src\\App.js":"2","C:\\Users\\DELL\\Desktop\\react\\01_react\\src\\LifyCycle.js":"3","D:\\React\\react-demo\\src\\index.js":"4","D:\\React\\react-demo\\src\\App.js":"5","D:\\React\\react-demo\\src\\LifyCycle.js":"6","D:\\React\\react-demo\\src\\NoControlInput.js":"7","D:\\React\\react-demo\\src\\ControlInput.js":"8","D:\\React\\react-demo\\src\\FormSimple.js":"9"},{"size":2081,"mtime":1608191115402,"results":"10","hashOfConfig":"11"},{"size":2247,"mtime":1608189499526,"results":"12","hashOfConfig":"11"},{"size":1368,"mtime":1608199076817,"results":"13","hashOfConfig":"11"},{"size":2432,"mtime":1608279257451,"results":"14","hashOfConfig":"15"},{"size":2247,"mtime":1608189499526,"results":"16","hashOfConfig":"15"},{"size":1927,"mtime":1608201474085,"results":"17","hashOfConfig":"15"},{"size":567,"mtime":1608278676157,"results":"18","hashOfConfig":"15"},{"size":1332,"mtime":1608268585697,"results":"19","hashOfConfig":"15"},{"size":1350,"mtime":1608279227441,"results":"20","hashOfConfig":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"1ll9m83",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"1quaehd",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\DELL\\Desktop\\react\\01_react\\src\\index.js",["44","45","46","47","48"],"//* 项目的入口文件\r\nimport React from 'react'\r\nimport ReactDom, { render } from 'react-dom'\r\nimport App from './App'\r\nimport LifyCycle from './LifyCycle'\r\n//* JSX - 到底是啥\r\n//* JSX = Javascript + Xml 对象 虚拟DOM元素\r\n//* {} == {{}}\r\nconst user = {\r\n    fristName:'张',\r\n    lastName:'三'\r\n}\r\nfunction formateName(user) {\r\n    return user.fristName + user.lastName\r\n}\r\nfunction getGeeting(user) {\r\n    if(user){\r\n        return <h1>hello,{formateName(user)}</h1>\r\n    }\r\n    return <h1>hello,react</h1>\r\n}\r\n\r\nconst ele = <h2>hello {formateName(user)}</h2>\r\nconsole.log(ele)\r\n// // ReactDom.render(<div>{getGeeting(user)}</div>,document.querySelector('#root'))\r\n\r\n//! React只更新 他需要更新的部分\r\n// function tick() {\r\n//     const element = (\r\n//         <div>\r\n//             <h3>hello world</h3>\r\n//             <h2>{new Date().toLocaleTimeString()}</h2>\r\n//         </div>\r\n//     )\r\n// //    ReactDom.render(element,document.querySelector('#root'))\r\n// }\r\n// setInterval(tick,1000)\r\n\r\n//* 循环绑定元素 使用map\r\nconst arr = [1,2,3,4]\r\nconst ulEle = (<ul>\r\n    {arr.map((item,index)=>{\r\n        //循环绑定的jsx元素，必须使用key属性，来区分不同元素 ，否则会报错\r\n        return (index>1 ? <li key={index}>{item}</li> : null)\r\n    })}\r\n</ul>);\r\n// // ReactDom.render(ulEle,document.querySelector('#root'))\r\n\r\n//* react核心思想就是组件化开发 其实就是玩JavaScript  就是函数\r\n\r\n//* 1.函数式声明 - 函数式组件，本身就是一个函数                  ----------------------单纯的显示数据\r\n//*              A .组件名称首字母一定大写！！！ 否则报错\r\n//*              B .组件返回一个jsx对象\r\n//*              C .props&组件\r\nfunction Welcome(props) {\r\n    return <h2>hello,{props.name}</h2>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// // ReactDom.render(<Welcome name='Welcome' />,document.querySelector('#root'))\r\n// //ReactDom.render(<App name='你好' />,document.querySelector('#root'))\r\nReactDom.render(<LifyCycle />,document.querySelector('#root'))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",["49","50"],"C:\\Users\\DELL\\Desktop\\react\\01_react\\src\\App.js",["51"],"import React, { Component } from 'react'\r\n\r\nexport default class App extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            // count : 0,\r\n            count : {\r\n                countt:0\r\n            },\r\n            arr : [\r\n                1,2,3,4,5,6,7,8,9,0\r\n            ]\r\n        }\r\n        this.state1 = {\r\n            count : 1\r\n        }\r\n        //! 1.改变this指向的第一种方式\r\n        this.add = this.add.bind(this)\r\n        // this.arrAdd = this.arrAdd.bind(this)\r\n    }\r\n    arrAdd=(e)=>{\r\n        let newArr = this.state.arr.splice(0,3)\r\n        // this.setState({\r\n        //     arr:newArr.concat([1000])\r\n        // })\r\n        this.setState((prevState,prevProps)=>({\r\n            arr:[...newArr]\r\n        }),()=>{\r\n\r\n        })\r\n        console.log(newArr)\r\n    }\r\n    add(e){\r\n        console.log(e)\r\n        //! 除了constructor之外的其他地方，修改状态唯一方法是调用 this.setState()\r\n        //! setState是异步操作\r\n        //* 1.setState对象:无法获取state中值的变化,开发中可能会出错\r\n        // this.setState({\r\n        //    count:{countt:this.state.count.countt+1}\r\n        // })\r\n        // console.log(this.state.count)           //! 不能获取到setState更新后的值\r\n        \r\n        //* 2.setState函数：可以用第二个参数，直接拿到异步更新后的值\r\n        let tempState = Object.assign({}, this.state.count, {countt: 100 });\r\n        this.setState((prevState,prevProps)=>({\r\n            // count:tempState\r\n            count:{countt:this.state.count.countt+1}\r\n        }),()=>{\r\n            //! 在一个回调函数，在状态改变之后就会执行\r\n            console.log(this.state.count.countt)           //! 能获取到setState更新后的值\r\n        })   \r\n    }\r\n    render() {\r\n        console.log('渲染了')\r\n        return (\r\n            <div>\r\n                {/* <h2>{this.state.count}</h2> */}\r\n                <h2>{this.state.count.countt}</h2>\r\n                <h3>{this.state.arr}</h3>\r\n                <button onClick={this.add}>操作对象+1</button>\r\n                <button onClick={this.arrAdd}>操作数组+1</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\DELL\\Desktop\\react\\01_react\\src\\LifyCycle.js",[],"D:\\React\\react-demo\\src\\index.js",["52","53","54","55","56","57","58","59"],"//* 项目的入口文件\r\nimport React from 'react'\r\nimport ReactDom, { render } from 'react-dom'\r\nimport App from './App'\r\nimport LifyCycle from './LifyCycle'\r\nimport NoControlInput from './NoControlInput'\r\nimport ControlInput from './ControlInput'\r\nimport FormSimple from './FormSimple'\r\n\r\n//* JSX - 到底是啥\r\n//* JSX = Javascript + Xml 对象 虚拟DOM元素\r\n//* {} == {{}}\r\nconst user = {\r\n    fristName:'张',\r\n    lastName:'三'\r\n}\r\nfunction formateName(user) {\r\n    return user.fristName + user.lastName\r\n}\r\nfunction getGeeting(user) {\r\n    if(user){\r\n        return <h1>hello,{formateName(user)}</h1>\r\n    }\r\n    return <h1>hello,react</h1>\r\n}\r\n\r\nconst ele = <h2>hello {formateName(user)}</h2>\r\nconsole.log(ele)\r\n// // ReactDom.render(<div>{getGeeting(user)}</div>,document.querySelector('#root'))\r\n\r\n//! React只更新 他需要更新的部分\r\n// function tick() {\r\n//     const element = (\r\n//         <div>\r\n//             <h3>hello world</h3>\r\n//             <h2>{new Date().toLocaleTimeString()}</h2>\r\n//         </div>\r\n//     )\r\n// //    ReactDom.render(element,document.querySelector('#root'))\r\n// }\r\n// setInterval(tick,1000)\r\n\r\n//* 循环绑定元素 使用map\r\nconst arr = [1,2,3,4]\r\nconst ulEle = (<ul>\r\n    {arr.map((item,index)=>{\r\n        //循环绑定的jsx元素，必须使用key属性，来区分不同元素 ，否则会报错\r\n        return (index>1 ? <li key={index}>{item}</li> : null)\r\n    })}\r\n</ul>);\r\n// // ReactDom.render(ulEle,document.querySelector('#root'))\r\n\r\n//* react核心思想就是组件化开发 其实就是玩JavaScript  就是函数\r\n\r\n//* 1.函数式声明 - 函数式组件，本身就是一个函数                  ----------------------单纯的显示数据\r\n//*              A .组件名称首字母一定大写！！！ 否则报错\r\n//*              B .组件返回一个jsx对象\r\n//*              C .props&组件\r\nfunction Welcome(props) {\r\n    return <h2>hello,{props.name}</h2>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// // ReactDom.render(<Welcome name='Welcome' />,document.querySelector('#root'))\r\n// //ReactDom.render(<App name='你好' />,document.querySelector('#root'))\r\n// // ReactDom.render(<LifyCycle />,document.querySelector('#root'))\r\n// // ReactDom.render(<NoControlInput />,document.querySelector('#root'))\r\n// //ReactDom.render(<ControlInput />,document.querySelector('#root'))\r\nReactDom.render(<FormSimple />,document.querySelector('#root'))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",["60","61"],"D:\\React\\react-demo\\src\\App.js",["62"],"D:\\React\\react-demo\\src\\LifyCycle.js",[],"D:\\React\\react-demo\\src\\NoControlInput.js",[],"D:\\React\\react-demo\\src\\ControlInput.js",[],"D:\\React\\react-demo\\src\\FormSimple.js",[],{"ruleId":"63","severity":1,"message":"64","line":3,"column":20,"nodeType":"65","messageId":"66","endLine":3,"endColumn":26},{"ruleId":"63","severity":1,"message":"67","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":11},{"ruleId":"63","severity":1,"message":"68","line":16,"column":10,"nodeType":"65","messageId":"66","endLine":16,"endColumn":20},{"ruleId":"63","severity":1,"message":"69","line":41,"column":7,"nodeType":"65","messageId":"66","endLine":41,"endColumn":12},{"ruleId":"63","severity":1,"message":"70","line":55,"column":10,"nodeType":"65","messageId":"66","endLine":55,"endColumn":17},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"63","severity":1,"message":"75","line":45,"column":13,"nodeType":"65","messageId":"66","endLine":45,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":3,"column":20,"nodeType":"65","messageId":"66","endLine":3,"endColumn":26},{"ruleId":"63","severity":1,"message":"67","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":11},{"ruleId":"63","severity":1,"message":"76","line":5,"column":8,"nodeType":"65","messageId":"66","endLine":5,"endColumn":17},{"ruleId":"63","severity":1,"message":"77","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":22},{"ruleId":"63","severity":1,"message":"78","line":7,"column":8,"nodeType":"65","messageId":"66","endLine":7,"endColumn":20},{"ruleId":"63","severity":1,"message":"68","line":20,"column":10,"nodeType":"65","messageId":"66","endLine":20,"endColumn":20},{"ruleId":"63","severity":1,"message":"69","line":45,"column":7,"nodeType":"65","messageId":"66","endLine":45,"endColumn":12},{"ruleId":"63","severity":1,"message":"70","line":59,"column":10,"nodeType":"65","messageId":"66","endLine":59,"endColumn":17},{"ruleId":"71","replacedBy":"79"},{"ruleId":"73","replacedBy":"80"},{"ruleId":"63","severity":1,"message":"75","line":45,"column":13,"nodeType":"65","messageId":"66","endLine":45,"endColumn":22},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","'App' is defined but never used.","'getGeeting' is defined but never used.","'ulEle' is assigned a value but never used.","'Welcome' is defined but never used.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"'tempState' is assigned a value but never used.","'LifyCycle' is defined but never used.","'NoControlInput' is defined but never used.","'ControlInput' is defined but never used.",["81"],["82"],"no-global-assign","no-unsafe-negation"]